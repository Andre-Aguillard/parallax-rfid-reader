from Tkinter import *

### GUI for the Lock:
class GUI4Lock(Frame):
    def __init__(self, master):
        Frame.__init__(self,master) ### This sets up the main window of the GUI
        self.master = master     ### in order to build widgets on to top it.
        self.images = []
        
    # image getter   
    @property
    def images(self):
        return self._images        
    # image getter
    @images.setter
    def images(self, value):
        self._images = value
      
    def setupGUI(self):
        #organize the GUI
        # this function works fine, as long as you have the images as actual GIFs
        self.pack(fill=BOTH, expand=1)
        # setup image at the top of GUI
        # widget is a Tkinter label
        # don't let image control width's size
        img = None
        GUI4Lock.image = Label(self, width=WIDTH, height=HEIGHT/2, image = img)
        GUI4Lock.image.image = img
        GUI4Lock.image.pack(side= TOP, fill=X, expand=1)
        GUI4Lock.image.pack_propagate(False)
        
        # setup text at bottom left of GUI
        # first, place frame where the text will be displayed
        text_frame = Frame(self, width=WIDTH / 2, height=HEIGHT/2)
        # widget - same deal as above
        # disable by default
        # don't let it control frame's size 
        GUI4Lock.text = Text(text_frame, bg="lightgrey", state=DISABLED)
        GUI4Lock.text.pack(fill=Y, expand=1)
        text_frame.pack(side=LEFT, fill=Y)
        text_frame.pack_propagate(False)
        
        ##Frame to hold the buttons, Yes Andre figured out how to do this himself.
        button_frame = LabelFrame(self,text="Buttons for user input" ,width= WIDTH/2, height=HEIGHT/2, relief =RAISED)
        ##Define what each button looks like and does. 
        GUI4Lock.button1= Button(button_frame, text="1", padx=10, pady=10, width=10,command= lambda: inputNumber(1))
        GUI4Lock.button2= Button(button_frame, text="2", padx=10, pady=10, width=10,command= lambda: inputNumber(2))
        GUI4Lock.button3= Button(button_frame, text="3", padx=10, pady=10, width=10,command= lambda: inputNumber(3))
        GUI4Lock.button4= Button(button_frame, text="4", padx=10, pady=10, width=10,command= lambda: inputNumber(4))
        GUI4Lock.button5= Button(button_frame, text="5", padx=10, pady=10, width=10,command= lambda: inputNumber(5))
        GUI4Lock.button6= Button(button_frame, text="6", padx=10, pady=10, width=10,command= lambda: inputNumber(6))
        GUI4Lock.button7= Button(button_frame, text="7", padx=10, pady=10, width=10,command= lambda: inputNumber(7))
        GUI4Lock.button8= Button(button_frame, text="8", padx=10, pady=10, width=10,command= lambda: inputNumber(8))
        GUI4Lock.button9= Button(button_frame, text="9", padx=10, pady=10, width=10,command= lambda: inputNumber(9))
        GUI4Lock.button0= Button(button_frame, text="0", padx=10, pady=10, width=10,command= lambda: inputNumber(0))
        GUI4Lock.buttonBlank= Button(button_frame, text="", padx=10, pady=10, width=40, state =DISABLED)
        GUI4Lock.buttonY= Button(button_frame, text="YES", padx=10, pady=10, width=10,command=inputYES)
        GUI4Lock.buttonN= Button(button_frame, text="NO", padx=10, pady=10, width=10,command=inputNO) 
        ##place the buttons in a grid within the button frame.
        GUI4Lock.button1.grid(row=0, column=0)
        GUI4Lock.button2.grid(row=0, column=1)
        GUI4Lock.button3.grid(row=0, column=2)
        GUI4Lock.button4.grid(row=1, column=0)
        GUI4Lock.button5.grid(row=1, column=1)
        GUI4Lock.button6.grid(row=1, column=2)
        GUI4Lock.button7.grid(row=2, column=0)
        GUI4Lock.button8.grid(row=2, column=1)
        GUI4Lock.button9.grid(row=2, column=2)
        GUI4Lock.button0.grid(row=3, column=1)
        GUI4Lock.buttonBlank.grid(row=4, columnspan=3)
        GUI4Lock.buttonY.grid(row=5, column=0)
        GUI4Lock.buttonN.grid(row=5, column=2)
        # initalize the button-frame, and don't let it control the frame's size
        button_frame.pack(side=RIGHT, fill=Y)
        button_frame.pack_propagate(False)
           
    def start(self):
        response = "Welcome to Better Bike Lock. \n\nPlease scan your RFID card above \nor " \
                    + "press a number to the right to \nmanually input a code."
        self.setupGUI()
        self.setLogoImage()
        display(response)
 
    def setLogoImage(self):
        GUI4Lock.original =PhotoImage(file="bikelock.gif")
        #resize the image to fit. 
        GUI4Lock.img = GUI4Lock.original.subsample(4,4)
        # display image to left
        GUI4Lock.image.config(image=GUI4Lock.img)
        GUI4Lock.image.image = GUI4Lock.img

def inputNumber(number):
        #Turns the input number into a string
        number = str(number)
        #appends the input number to the list
        global ManCode
        ManCode.append(number)
        if (len(ManCode)== 10):
            GUI4Lock.button0.config(state=DISABLED)
            GUI4Lock.button1.config(state=DISABLED)
            GUI4Lock.button2.config(state=DISABLED)
            GUI4Lock.button3.config(state=DISABLED)
            GUI4Lock.button4.config(state=DISABLED)
            GUI4Lock.button5.config(state=DISABLED)
            GUI4Lock.button6.config(state=DISABLED)
            GUI4Lock.button7.config(state=DISABLED)
            GUI4Lock.button8.config(state=DISABLED)
            GUI4Lock.button9.config(state=DISABLED)
            mCode = "".join(ManCode)
            manualCode(mCode)
            del ManCode [:]
            GUI4Lock.button0.config(state=NORMAL)
            GUI4Lock.button1.config(state=NORMAL)
            GUI4Lock.button2.config(state=NORMAL)
            GUI4Lock.button3.config(state=NORMAL)
            GUI4Lock.button4.config(state=NORMAL)
            GUI4Lock.button5.config(state=NORMAL)
            GUI4Lock.button6.config(state=NORMAL)
            GUI4Lock.button7.config(state=NORMAL)
            GUI4Lock.button8.config(state=NORMAL)
            GUI4Lock.button9.config(state=NORMAL)
            ManualCodeCounter=0
        else :
            global ManualCodeCounter
            ManualCodeCounter +=1
            codeCount = str(ManualCodeCounter)
            GUI4Lock.text.config(state=NORMAL)
            GUI4Lock.text.delete("1.0", END)
            GUI4Lock.text.insert(END, "You've entered manual code mode. \n\n" + \
                                 "Please input a 10-digit code using \nthe number pad " +\
                                 "on the left. \n \nYour current code is: " + codeCount \
                                  + " character(s)")
            GUI4Lock.text.config(state=DISABLED)

def inputYES():
    global YorN
    if (YorN == "mancode"):
        response = "Fantastic! Proceeding to Locking Method."
        
    if (YorN == "newManCode"):
        response = "Okay, will do Boss. \n\n Just enter it in using the keypad >>>"
    if (YorN == "nothing"):
        response = "Please use the keypad >>>" +"\nto input a manual code."
    display(response)
    
def inputNO():
    global YorN
    if (YorN == "mancode"):
        response = "Would you like to enter a new code?"
        YorN = "newManCode"
    if (YorN == "newManCode"):
        response="No, ok... \n\n\n Goodbye!"
        display(response)
        response = "Welcome to Better Bike Lock. \n\nPlease scan your RFID card above \nor " \
                    + "press a number to the right to \nmanually input a code."
    if (YorN == "nothing"):
        response = "Please use the keypad >>>" +"\nto input a manual code."
    display(response)
    
def manualCode(mCode):
        GUI4Lock.text.config(state=NORMAL)
        GUI4Lock.text.delete("1.0", END)
        GUI4Lock.text.insert(END, "Your Bike Lock Code is: " + mCode + "\n\nIt is recommended that you" \
                            + " write down\nyour code, or take a picture of it \nwith your phone." + \
                            "\n\nAre you satisfied with your code? \nPress YES or NO to the left to \nconfirm.")
        global YorN
        YorN = "mancode"
        GUI4Lock.text.config(state=DISABLED)

def display(response):
    GUI4Lock.text.config(state=NORMAL)
    GUI4Lock.text.delete("1.0", END)
    # Display the desired text on the screen.
    GUI4Lock.text.insert(END, response)
    GUI4Lock.text.config(state=DISABLED)
        

WIDTH = 800
HEIGHT= 600
##Variables to use if the code is inputed manually.
ManCode = []
ManualCodeCounter = 0

##Variable to control Yes or No feedback
YorN = "nothing"

window = Tk()
window.title("Better Bike Lock Home")

t = GUI4Lock(window)


t.start()

window.mainloop()
